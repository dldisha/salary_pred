# -*- coding: utf-8 -*-
"""adult_income.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TGTGSr4ALJOaLj7x62SyT_HVlzYx5gCi

# Imbalanced Classification with the Adult Income Dataset

### Import libraries
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing

##pickling
import pickle

"""### Download dataset """

#reading the dataset file
data = pd.read_csv('data.csv')

data.head()

"""### Data cleaning"""

#datset description
print('\nAdult income dataset summary:')

print('Shape:', data.shape)
print(data.describe())
print('\nNull Values:')
print(data.isnull().values.any())
print('\nDuplicate Values:')
print(data.duplicated().any())
print('\n Missing Values')
print(data.isin(['?']).sum(axis=0))

#dropping these 2 redundant columns
data = data.drop(['fnlwgt', 'educational-num'], axis=1)

col_names = data.columns

#replcing missing values with mode values
for c in col_names:
    data = data.replace("?", np.NaN)
data = data.apply(lambda x: x.fillna(x.value_counts().index[0]))

data.head()

#Converting categorical values to numerical ones
data.replace(['Divorced', 'Married-AF-spouse',
            'Married-civ-spouse', 'Married-spouse-absent',
            'Never-married', 'Separated', 'Widowed'],
           ['divorced', 'married', 'married', 'married',
            'not married', 'not married', 'not married'], inplace=True)
 
category_col = ['workclass', 'race', 'education', 'marital-status', 'occupation',
                'relationship', 'gender', 'native-country', 'income']

labelEncoder = preprocessing.LabelEncoder()
 
mapping_dict = {}
for col in category_col:
    data[col] = labelEncoder.fit_transform(data[col])
 
    le_name_mapping = dict(zip(labelEncoder.classes_,
                               labelEncoder.transform(labelEncoder.classes_)))
 
    mapping_dict[col] = le_name_mapping

# summarize the class distribution
from collections import Counter

target = data.values[:,-1]
counter = Counter(target)

for k,v in counter.items():
	per = v / len(target) * 100
	print('Class=%s, Count=%d, Percentage=%.3f%%' % (k, v, per))

"""### Training the model"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
 
X = data.values[:, 0:12]
Y = data.values[:, 12]

#Splitting the dataset
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 100)

#Using decision tress to train the model using gini index accuracy
model_gini = DecisionTreeClassifier(criterion = "gini",
                                     random_state = 100,
                                     max_depth = 5,
                                     min_samples_leaf = 5)

#fitting the model 
model_gini.fit(X_train, Y_train)

#x_test prediction
y_pred_gini = model_gini.predict(X_test)

print("Adult Income salary prediction dataset \n") 
print ("Decision Tree using Gini Index Accuracy is: ", accuracy_score(Y_test, y_pred_gini)*100 )

##Making Pickle file for our model
pickle.dump(model_gini, open("model.pkl", "wb"))